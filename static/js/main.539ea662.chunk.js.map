{"version":3,"sources":["reportWebVitals.ts","Services/Context.ts","http-common.ts","Services/PokemonListService.ts","Components/UI/LanguageSwitcher.tsx","Components/Layout/Header.tsx","Hooks/useLocalStorage.ts","Hooks/usePokemonCapture.ts","Services/Common.ts","Components/Pages/PokemonList.tsx","Components/UI/PokemonImage.tsx","assets/pokeboll-closed.png","assets/pokeball-opened.png","Components/UI/CaptureButton.tsx","Components/UI/Spinner.tsx","Components/UI/PokemonCard.tsx","Components/UI/NotCapturedPokemon.tsx","Components/UI/CapturedPokemons.tsx","Components/Layout/RightSidebar.tsx","Components/Layout/Footer.tsx","Components/Layout/Layout.tsx","Components/UI/PokemonSearchBox.tsx","Components/UI/EvolutionChain.tsx","Components/Pages/PokemonPage.tsx","Components/Pages/PokemonMovePage.tsx","Components/Pages/Page404.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MyGlobalContext","createContext","language","setLanguage","useGlobalContext","useContext","axios","create","baseURL","headers","PokemonListService","getAll","http","get","name","getSpecies","getLanguages","getMove","getEvolutionChain","id","LanguageSwitcher","className","useState","currentLanguage","setCurrentLanguage","languageList","setLanguageList","useEffect","response","data","results","map","catch","e","console","log","value","onChange","event","target","Header","to","Image","alt","src","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","error","warn","storedValue","setStoredValue","handleStorageChange","addEventListener","removeEventListener","newValue","setItem","stringify","dispatchEvent","Event","usePokemonCapture","capturedPokemons","setCapturedPokemonList","checkCapturedPokemon","pokemon","find","currentPokemon","setCapturedPokemons","filter","SortDirection","getIdFromURL","url","urlParts","split","Number","length","PokemonImage","props","pokemonImageURL","setPokemonImageURL","pokemonFallbackImageURL","setFallbackPokemonImageURL","pokemonId","sprites","other","front_default","fallbackImage","initialImage","CaptureButton","Button","color","variant","onClick","pokeball","pokeballOpened","Spinner","width","height","viewBox","preserveAspectRatio","cx","cy","fill","stroke","strokeWidth","r","strokeDasharray","transform","attributeName","type","calcMode","values","keyTimes","dur","begin","repeatCount","PokemonCard","Card","style","Body","Title","Text","NotCapturedPokemon","pokemons","setPokemons","randomPokemon","setRandomPokemon","captured","Array","from","freePokemons","x","capturedIndex","splice","Math","floor","random","CapturedPokemons","list","index","RightSidebar","Footer","Container","Row","Col","href","Layout","children","Provider","basename","md","span","order","xs","PokemonSearchBox","placeholder","handleSearch","PokemonList","searchPokemon","setSearchPokemon","SortIDAsc","sortStatus","setSortStatus","responsePoke","poke","toLowerCase","SortIDDesc","SortNameAZ","SortNameZA","includes","sort","a","b","EvolutionChain","pokemonSpecies","evolution","setEvolution","evolution_chain","evolutionId","chain","evolutionChain","evolutionList","chainItem","species","push","evolves_to","horizontal","PokemonPage","params","useParams","setPokemon","setPokemonSpecies","setName","translatedName","names","lang","stats","st","stat","base_stat","abilities","ability","weight","types","typ","moves","move","PokemonMovePage","setMove","Move","learned_by_pokemon","MoveDetailes","effect_entries","effect","power","Page404","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.539ea662.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createContext, useContext} from \"react\"\n\n/**\n * The global content type.\n */\nexport type GlobalContent = {\n    language: string\n    setLanguage: (c: string) => void\n}\n\n/**\n * The application Language.\n */\nexport const MyGlobalContext = createContext<GlobalContent>({\n    language: 'en',\n    setLanguage: () => {\n    },\n})\nexport const useGlobalContext = () => useContext(MyGlobalContext)\n","import axios from \"axios\";\n\n/**\n * Uses the base url and headers for fetching data.\n */\nexport default axios.create({\n    baseURL: \"https://pokeapi.co/api/v2/\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n})\n","import http from \"../http-common\";\n\n/**\n * Retrieves the Get request from \"/pokemon?limit= \".\n */\nconst getAll = (): any => {\n    //@todo change limit\n    return http.get(\"/pokemon-species?limit=1000\");\n}\n\n/**\n * Retrieves the Get request from `/evolution-chain/${id}`.\n *\n * @param {Number} name The name of pokemon.\n */\nconst getEvolutionChain = (id: number): any => {\n    return http.get(`/evolution-chain/${id}`)\n}\n\n/**\n * Retrieves the Get request from `/pokemon/${name}`.\n *\n * @param {String} name The name of pokemon.\n */\nconst get = (name: string): any => {\n    return http.get(`/pokemon/${name}`);\n}\n\n/**\n * Retrieves the Get request from `/pokemon-species/${name}`.\n *\n * @param {String} name The name of pokemon.\n */\nconst getSpecies = (name: string): any => {\n    return http.get(`/pokemon-species/${name}`);\n}\n/**\n * Get List of available languages.\n */\nconst getLanguages = () => {\n    return http.get('/language');\n}\n/**\n * Retrieves the Get request from `/move/${name}`.\n *\n * @param {String} name The name of pokemon.\n */\nconst getMove = (name: string): any => {\n    return http.get(`/move/${name}`);\n}\n\n/**\n * Retrieves the Get request from separate endpoint.\n */\nconst PokemonListService = {\n    getAll,\n    get,\n    getSpecies,\n    getLanguages,\n    getMove,\n    getEvolutionChain\n}\n\nexport default PokemonListService;\n","import React, {useEffect, useState} from \"react\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport {useGlobalContext} from '../../Services/Context'\n\n/**\n * The language switcher.\n * @param props\n * @constructor The functional component for switching languages.\n */\nconst LanguageSwitcher: React.FC<{ className?: string }> = ({className=\"\"}) => {\n    const [currentLanguage, setCurrentLanguage] = useState<string>('en');\n    const [languageList, setLanguageList] = useState<Array<string>>([]);\n    const {setLanguage} = useGlobalContext()\n\n    useEffect(() => {\n        PokemonListService.getLanguages()\n            .then((response: any) => {\n                setLanguageList(response.data.results.map(language => language.name));\n            })\n            .catch((e: any) => {\n                console.log(e);\n            })\n    }, []);\n\n    const handleChange = (event) => {\n        setCurrentLanguage(event.target.value)\n        setLanguage(event.target.value)\n    }\n\n    return (\n        <div className={className}>\n            <select name=\"languages\" value={currentLanguage}\n                    onChange={handleChange}>\n                {languageList.map(language => <option\n                    key={language} value={language}>{language}</option>)}\n            </select>\n        </div>\n    );\n}\nexport default LanguageSwitcher;\n","import React from \"react\";\nimport LanguageSwitcher from \"../UI/LanguageSwitcher\";\nimport {Link} from \"react-router-dom\";\nimport {Image} from \"react-bootstrap\";\n\nconst Header: React.FC = () => {\n    return (\n        <nav\n            className=\"navbar navbar-expand-md navbar-light bg-opacity-25 bg-dark fixed-top\">\n            <Link to={\"/\"}\n                  className=\"navbar-brand col-sm-3 col-md-2 mr-0 align-items-center\">\n                <Image alt=\"Homepage\" className=\"class-logo\"\n                       src=\"https://raw.githubusercontent.com/PokeAPI/media/master/logo/pokeapi.svg?sanitize=true\"\n                />\n            </Link>\n            <LanguageSwitcher/>\n        </nav>\n    )\n}\nexport default Header;\n","import {Dispatch, SetStateAction, useEffect, useState} from 'react'\n\ntype SetValue<T> = Dispatch<SetStateAction<T>>\n\n\n/**\n * The useLocalStorage declaration.\n *\n * @param {String} key The key for storage.\n * @param initialValue The value to be held in storage.\n */\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\n    /**\n     * Get from local storage, then parse stored json or return initialValue\n     */\n    const readValue = (): T => {\n        if (typeof window === 'undefined') {\n            return initialValue\n        }\n        try {\n            const item = window.localStorage.getItem(key)\n            return item ? (JSON.parse(item) as T) : initialValue\n        } catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error)\n            return initialValue\n        }\n    }\n\n    /**\n     * State to store the value\n     * Pass initial state function to useState so logic is only executed once\n     */\n    const [storedValue, setStoredValue] = useState<T>(readValue)\n\n    /**\n     * Return a wrapped version of useState's setter function that\n     * persists the new value to localStorage.\n     * @param value\n     */\n    const setValue: SetValue<T> = value => {\n        if (typeof window == 'undefined') {\n            console.warn(\n                `Tried setting localStorage key “${key}” even though environment is not a client,`\n            )\n        }\n        try {\n            const newValue = value instanceof Function ? value(storedValue) : value\n            window.localStorage.setItem(key, JSON.stringify(newValue))\n            setStoredValue(newValue)\n            window.dispatchEvent(new Event('local-storage'))\n        } catch (error) {\n            console.warn(`Error setting localStorage key “${key}”:`, error)\n        }\n    }\n    /**\n     * Sets the stored value.\n     */\n    useEffect(() => {\n        setStoredValue(readValue())\n    }, []);\n\n    /**\n     * Handles the change of storage.\n     */\n    useEffect(() => {\n        const handleStorageChange = () => {\n            setStoredValue(readValue())\n        }\n        window.addEventListener('storage', handleStorageChange)\n        window.addEventListener('local-storage', handleStorageChange)\n        return () => {\n            window.removeEventListener('storage', handleStorageChange)\n            window.removeEventListener('local-storage', handleStorageChange)\n        }\n    }, [])\n\n    return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import useLocalStorage from \"./useLocalStorage\";\nimport IPokemonData from \"../Types/IPokemonData\";\n\ninterface CapturedPokemonType {\n    capturedPokemons: Array<IPokemonData>\n    setCapturedPokemons: (pokemon: IPokemonData) => void\n    checkCapturedPokemon: (pokemon: IPokemonData) => boolean\n}\n\n/**\n * The usePokemonCapture declaration.\n */\nexport default function usePokemonCapture(): CapturedPokemonType {\n    const [capturedPokemons, setCapturedPokemonList] = useLocalStorage<Array<IPokemonData>>('capturedPokemonList', []);\n\n    /**\n     * Checks if the pokemon is captured.\n     *\n     * @param {IPokemonData} pokemon The pokemon.\n     */\n    const checkCapturedPokemon = (pokemon: IPokemonData): boolean => {\n        const finding = capturedPokemons.find(currentPokemon => currentPokemon.name === pokemon.name);\n        return typeof finding === 'object';\n    }\n\n    /**\n     * Sets the pokemon to captured list if the pokemon is captured.\n     *\n     * @param {IPokemonData} pokemon The pokemon.\n     */\n    const setCapturedPokemons = (pokemon: IPokemonData): void => {\n        if (checkCapturedPokemon(pokemon)) {\n            setCapturedPokemonList(capturedPokemons.filter(currentPokemon => currentPokemon.name !== pokemon.name));\n        } else {\n            setCapturedPokemonList([...capturedPokemons, pokemon])\n        }\n    }\n\n    return {capturedPokemons, setCapturedPokemons, checkCapturedPokemon};\n}\n\n","/**\n * Get Id from Url.\n *\n * @param  {String} url - URL of content item.\n *\n * @return {number} id of content item.\n */\nexport const getIdFromURL = (url: string): number | undefined => {\n    if (!url || typeof url === 'undefined') return undefined;\n    const urlParts = url.split(\"/\");\n    return Number(urlParts[urlParts.length - 2]);\n}\n","import React, {useState, useEffect} from \"react\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport IPokemonData from \"../../Types/IPokemonData\";\nimport PokemonCard from \"../UI/PokemonCard\";\nimport PokemonSearchBox from \"../UI/PokemonSearchBox\";\nimport Spinner from \"../UI/Spinner\";\nimport useLocalStorage from \"../../Hooks/useLocalStorage\";\nimport {getIdFromURL} from \"../../Services/Common\";\n\nenum SortDirection {\n    SortIDAsc = \"SortIDAsc\",\n    SortIDDesc = \"SortIDDesc\",\n    SortNameAZ = \"SortNameAZ\",\n    SortNameZA = \"SortNameZA\",\n}\n\n/**\n * Generates the list of pokemon.\n *\n * @param props The list of pokemon.\n *\n * @constructor The functional component of PokemonList.\n */\nconst PokemonList: React.FC = (props) => {\n\n    const [pokemons, setPokemons] = useLocalStorage<Array<IPokemonData>>('pokemonsList', []);\n    const [searchPokemon, setSearchPokemon] = useState<string>(\"\");\n    const [sortStatus, setSortStatus] = useState<string>(SortDirection.SortIDAsc);\n\n    /**\n     * Retrieves all pokemons and extract ids.\n     */\n    useEffect(() => {\n        if (pokemons.length) return;\n        PokemonListService.getAll()\n            .then((response: any) => {\n                const responsePoke = response.data.results.map(poke => {\n                    poke.id = getIdFromURL(poke.url);\n                    return poke;\n                });\n                setPokemons(responsePoke);\n            })\n            .catch((e: any) => {\n                console.warn(e);\n            })\n\n    }, []);\n\n    /**\n     * Handles search on input.\n     *\n     * @param e Event.\n     */\n    const handleSearch: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setSearchPokemon(e.target.value.toLowerCase())\n    }\n\n    /**\n     * Filter pokemon by name in SearchBox.\n     *\n     * @param pokemon All pokemons.\n     */\n    const filterPokemon = pokemon => pokemon.name.toLowerCase().includes(searchPokemon)\n\n    /**\n     * Sorts pokemon by ID or Name Desc and Asc.\n     *\n     * @param a Previous item.\n     *\n     * @param b Next item.\n     */\n    const sortingLogic = (a: IPokemonData, b: IPokemonData) => {\n        switch (sortStatus) {\n            case SortDirection.SortIDAsc:\n                if (a.id > b.id) {\n                    return 1;\n                }\n                if (a.id < b.id) {\n                    return -1;\n                }\n                break;\n\n            case SortDirection.SortIDDesc:\n                if (a.id < b.id) {\n                    return 1;\n                }\n                if (a.id > b.id) {\n                    return -1;\n                }\n                break;\n\n            case SortDirection.SortNameAZ:\n\n                if (a.name > b.name) {\n                    return 1;\n                }\n                if (a.name < b.name) {\n                    return -1;\n                }\n                break;\n\n            case SortDirection.SortNameZA:\n                if (a.name < b.name) {\n                    return 1;\n                }\n                if (a.name > b.name) {\n                    return -1;\n                }\n\n                break;\n        }\n\n        return 0;\n    }\n\n    if (!pokemons || typeof pokemons === \"undefined\") return (\n        <h1><Spinner/>Loading...</h1>);\n\n    const handleSortChange = (event) => {\n        setSortStatus(event.target.value);\n    }\n\n    return (\n        <>\n            <PokemonSearchBox placeholder=\"Pokemon name\"\n                              handleSearch={handleSearch}/>\n            <select onChange={handleSortChange}>\n                <option\n                    key={SortDirection.SortIDAsc}\n                    value={SortDirection.SortIDAsc}>Sort by Id: start-end\n                </option>\n                <option\n                    key={SortDirection.SortIDDesc}\n                    value={SortDirection.SortIDDesc}>Sort\n                    by Id: end-start\n                </option>\n                <option\n                    key={SortDirection.SortNameAZ}\n                    value={SortDirection.SortNameAZ}>Sort\n                    by Name: A-Z\n                </option>\n                <option\n                    key={SortDirection.SortNameZA}\n                    value={SortDirection.SortNameZA}>Sort\n                    by Name: Z-A\n                </option>\n            </select>\n            <div\n                className=\"list-group d-flex flex-wrap flex-row  align-content-between lazy-test\">\n                {pokemons.filter(filterPokemon).sort(sortingLogic).map((pokemon, index) =>\n                    <PokemonCard key={index} pokemon={pokemon}/>\n                )}\n\n            </div>\n        </>\n    )\n}\n\nexport default PokemonList;\n","import React, {useEffect, useState} from \"react\";\nimport {getIdFromURL} from \"../../Services/Common\";\nimport IPokemonSimpleComponent from \"../../Types/IPokemonSimpleComponent\";\nimport ReactImageFallback from 'react-image-fallback';\n\n/**\n * Gets the image of the pokemon.\n * @param props\n * @constructor The functional component for PokemonImage.\n */\nconst PokemonImage: React.FC<IPokemonSimpleComponent> = (props) => {\n    const {pokemon} = props;\n    /**\n     * Pokemon Id.\n     */\n    const [pokemonImageURL, setPokemonImageURL] = useState<string>(\"\");\n    const [pokemonFallbackImageURL, setFallbackPokemonImageURL] = useState<string>(\"\");\n\n    useEffect(() => {\n        let pokemonId: number | undefined;\n        if (typeof pokemon.id !== 'undefined') {\n            pokemonId = pokemon.id;\n        } else {\n            pokemonId = getIdFromURL(pokemon.url);\n        }\n\n        if (typeof pokemon.sprites?.other?.front_default?.front_default !== 'undefined') {\n            setPokemonImageURL(pokemon.sprites.other.front_default.front_default);\n        } else {\n            setPokemonImageURL(`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`);\n        }\n\n        if (typeof pokemon.sprites?.other?.front_default?.front_default !== 'undefined') {\n            setPokemonImageURL(pokemon.sprites.front_default);\n        } else {\n            setFallbackPokemonImageURL(`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonId}.png`);\n        }\n    }, [pokemon]);\n\n    return <ReactImageFallback\n        src={pokemonImageURL}\n        fallbackImage={pokemonFallbackImageURL}\n        initialImage=\"loader.gif\"\n        alt={pokemon.name}\n        className=\"pokemon-main-image\"/>\n}\n\nexport default PokemonImage;\n","export default __webpack_public_path__ + \"static/media/pokeboll-closed.a835fb9b.png\";","export default __webpack_public_path__ + \"static/media/pokeball-opened.d57c1e68.png\";","import React from \"react\";\nimport usePokemonCapture from \"../../Hooks/usePokemonCapture\";\nimport IPokemonSimpleComponent from \"../../Types/IPokemonSimpleComponent\";\nimport {Button, Image} from \"react-bootstrap\";\nimport pokeball from '../../assets/pokeboll-closed.png'\nimport pokeballOpened from '../../assets/pokeball-opened.png';\n\n/**\n * The capture button functional component.\n * @param props The button status.\n * @constructor of CaptureButton.\n */\nconst CaptureButton: React.FC<IPokemonSimpleComponent> = (props) => {\n    const {setCapturedPokemons, checkCapturedPokemon} = usePokemonCapture();\n    const {pokemon} = props;\n\n    return (\n        <Button color=\"success\" className=\"capture-free-button\" variant=\"light\"\n                onClick={() => setCapturedPokemons(pokemon)}>\n\n            {checkCapturedPokemon(pokemon) ?\n                <><Image alt=\"Free\" src={pokeball}/><span>&nbsp;free</span></> :\n                <><Image alt=\"Capture\" src={pokeballOpened}/><span>&nbsp;capture</span></>\n            }\n        </Button>);\n};\n\nexport default CaptureButton;\n","import React from \"react\";\n\nconst Spinner: React.FC = () => (\n    <div className=\"post loading\">\n        <svg\n            width=\"80\"\n            height=\"80\"\n            viewBox=\"0 0 100 100\"\n            preserveAspectRatio=\"xMidYMid\"\n        >\n            <circle\n                cx=\"50\"\n                cy=\"50\"\n                fill=\"none\"\n                stroke=\"#49d1e0\"\n                strokeWidth=\"10\"\n                r=\"35\"\n                strokeDasharray=\"164.93361431346415 56.97787143782138\"\n                transform=\"rotate(275.845 50 50)\"\n            >\n                <animateTransform\n                    attributeName=\"transform\"\n                    type=\"rotate\"\n                    calcMode=\"linear\"\n                    values=\"0 50 50;360 50 50\"\n                    keyTimes=\"0;1\"\n                    dur=\"1s\"\n                    begin=\"0s\"\n                    repeatCount=\"indefinite\"\n                />\n            </circle>\n        </svg>\n    </div>\n);\nexport default Spinner;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport PokemonImage from \"./PokemonImage\";\nimport CaptureButton from \"./CaptureButton\";\nimport IPokemonSimpleComponent from \"../../Types/IPokemonSimpleComponent\";\nimport {Card} from \"react-bootstrap\";\nimport Spinner from \"./Spinner\";\n\n/**\n * The pokemon card.\n *\n * @param props Pokemon.\n *\n * @constructor the functional component for pokemon card.\n */\nconst PokemonCard: React.FC<IPokemonSimpleComponent> = (props) => {\n    const {pokemon} = props;\n    if (!pokemon) return <Spinner/>;\n\n    return (\n        <Card style={{width: '18rem'}}\n              className=\"pokemon-card card text-dark text-center\">\n            <Card.Body>\n                <Card.Title className=\"pokemon-name\">\n                    <span>\n                        {pokemon.name}\n                        {pokemon.id &&\n                        <><br/><span\n                            className=\"pokemon-id\">(#{pokemon.id})</span></>}\n                    </span>\n                </Card.Title>\n                <Card.Text>\n                    <Link className=\"\"\n                          to={`/pokemon/${pokemon.name}`}>\n                        <PokemonImage pokemon={pokemon}/>\n                    </Link>\n                </Card.Text>\n\n                <CaptureButton pokemon={pokemon}/>\n            </Card.Body>\n        </Card>)\n}\n\nexport default PokemonCard;\n","import React, {useState, useEffect} from \"react\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport usePokemonCapture from \"../../Hooks/usePokemonCapture\";\nimport IPokemonData from \"../../Types/IPokemonData\";\nimport PokemonCard from \"./PokemonCard\";\nimport {Card, Button} from \"react-bootstrap\";\nimport Spinner from \"./Spinner\";\n\n/**\n * Functional component for random notcaptured pokemon.\n * @param props Captured pokemon.\n * @constructor of NotCapturedPokemon.\n */\nconst NotCapturedPokemon: React.FC = (props) => {\n    const [pokemons, setPokemons] = useState<Array<IPokemonData>>([]);\n    const {capturedPokemons} = usePokemonCapture();\n    const [randomPokemon, setRandomPokemon] = useState<IPokemonData>();\n\n    /**\n     * Gets the all pokemon.\n     */\n    useEffect(() => {\n        PokemonListService.getAll()\n            .then((response: any) => {\n                setPokemons(response.data.results);\n            })\n            .catch((e: any) => {\n                console.log(e);\n            })\n    }, []);\n\n    /**\n     * Gets the random pokemon.\n     */\n    useEffect(() => {\n        let captured: Array<IPokemonData> = Array.from(capturedPokemons);\n\n        const freePokemons = pokemons.filter(x => {\n            for (let capturedIndex in captured) {\n                if (captured[capturedIndex].name === x.name) {\n                    // Remove captured from the list of comparison to reduce task complexity.\n                    captured = captured.splice(0, 1);\n                    return false;\n                }\n            }\n            return x;\n        });\n        setRandomPokemon(freePokemons[Math.floor(Math.random() * freePokemons.length)]);\n    }, [capturedPokemons, pokemons]);\n\n    if (!randomPokemon) return (<Spinner/>);\n\n    return (\n        <>\n            <h4>See also</h4>\n            <div\n                className=\"list-group d-flex flex-wrap flex-row justify-content-center\">\n                <PokemonCard pokemon={randomPokemon}/>\n            </div>\n        </>\n    );\n};\nexport default NotCapturedPokemon;\n","import React from \"react\";\nimport PokemonCard from \"./PokemonCard\";\nimport usePokemonCapture from \"../../Hooks/usePokemonCapture\";\n\n/**\n * Functional component for list of captured pokemon.\n * @param props Captured pokemon.\n * @constructor of CapturedPokemons.\n */\nconst CapturedPokemons: React.FC = (props) => {\n    const {capturedPokemons} = usePokemonCapture();\n    const list = capturedPokemons.map((currentPokemon, index) =>\n        <PokemonCard key={index} pokemon={currentPokemon}/>\n    );\n\n    return (\n        <>\n            <h4>Captured</h4>\n            <div\n                className=\"list-group d-flex flex-wrap flex-row justify-content-center\">{list}</div>\n        </>\n    );\n}\nexport default CapturedPokemons;\n","import React from \"react\";\nimport NotCapturedPokemon from \"../UI/NotCapturedPokemon\";\nimport CapturedPokemons from \"../UI/CapturedPokemons\";\n\nconst RightSidebar: React.FC = () => {\n    return (\n        <>\n            <NotCapturedPokemon/>\n            <hr/>\n            <CapturedPokemons/>\n        </>\n    )\n};\nexport default RightSidebar;\n","import React from \"react\";\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nconst Footer: React.FC = () => {\n    return (\n        <Container\n            className=\"navbar navbar-expand-md navbar-light bg-opacity-25 bg-dark fixed-bottom\">\n\n            <Row>\n                <Col>Bottom</Col>\n                <Col>\n                    <a href={\"https://gist.github.com/xcambar/c6438e7330584e42f71f2a51b8b367cc\"}\n                       className=\"navbar-brand col-sm-3 col-md-2 mr-0 align-items-center\">\n                        Pokédex Mission\n                    </a>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\nexport default Footer;\n","import React, {useState} from \"react\";\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport {MyGlobalContext} from '../../Services/Context'\nimport Header from './Header';\nimport RightSidebar from \"./RightSidebar\";\nimport Footer from './Footer';\n\n/**\n * Main Layout component.\n *\n * @param children\n *\n * @constructor\n */\nconst Layout: React.FC<{ className: string }> = ({className, children}) => {\n    const [language, setLanguage] = useState<string>('en');\n\n    return (\n        <Container className={className}>\n            <MyGlobalContext.Provider\n                value={{language, setLanguage}}>\n                <Router basename={'/pokedex'}>\n                    <Row>\n                        <Header/>\n                    </Row>\n                    <Row>\n                        <Col md={{span: 10, order: 0}} xs={{span: 12, order: 1}}>\n                            <main>{children}</main>\n                        </Col>\n                        <Col md={{span: 2, order: 1}} xs={{span: 12, order: 0}}>\n                            <RightSidebar/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Footer/>\n                    </Row>\n                </Router>\n            </MyGlobalContext.Provider>\n        </Container>\n    )\n}\n\nexport default Layout\n","import React from \"react\";\nimport IPokemonSearchBox from \"../../Types/IPokemonSearchBox\";\n\n/**\n * Searches pokemon.\n *\n * @param {IPokemonSearchBox} props Pokemon list.\n *\n * @constructor The functional component of PokemonSearchBox.\n */\nconst PokemonSearchBox: React.FC<IPokemonSearchBox> = (props) => {\n    return <input\n        className=\"p-2 flex-grow-1\"\n        type='search'\n        placeholder={props.placeholder}\n        onChange={props.handleSearch}/>\n};\n\nexport default PokemonSearchBox;\n","import React, {useEffect, useState} from \"react\";\nimport IPokemonData from \"../../Types/IPokemonData\";\nimport {ListGroup} from \"react-bootstrap\";\nimport {getIdFromURL} from \"../../Services/Common\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport PokemonCard from \"./PokemonCard\";\nimport {\n    ListGroup as Ul,\n    ListGroupItem as Li\n} from \"react-bootstrap\";\n\n/**\n * Item of chain evolution sequence.\n */\ninterface IEvolutionChainItem {\n    species: IPokemonData | null;\n    evolves_to: Array<IEvolutionChainItem>;\n}\n\ninterface IEvolutionComponent {\n    pokemon: IPokemonData\n    pokemonSpecies: IPokemonData\n}\n\n/**\n * Retrieves evolution chain.\n * @param props The pokemon.\n * @constructor The functional component of EvolutionChain.\n */\nconst EvolutionChain: React.FC<IEvolutionComponent> = (props) => {\n    const {pokemonSpecies} = props;\n    const [evolution, setEvolution] = useState<Array<IPokemonData>>([]);\n\n    useEffect(() => {\n        // Get evolution id.\n        if (pokemonSpecies.evolution_chain?.url) {\n            const evolutionId = getIdFromURL(pokemonSpecies.evolution_chain?.url);\n            if (typeof evolutionId === 'undefined') return undefined;\n\n            PokemonListService.getEvolutionChain(evolutionId)\n                .then((response: any) => {\n                    // Restructure chain.\n                    if (typeof response.data.chain === \"undefined\") return;\n\n                    const evolutionChain = response.data.chain;\n                    const evolutionList: Array<IPokemonData> = [];\n                    if (typeof evolutionChain === \"undefined\") return;\n\n                    (function getItem(chainItem: IEvolutionChainItem): any {\n                            if (chainItem.species) {\n                                evolutionList.push(chainItem.species)\n                                if (chainItem.evolves_to.length) {\n                                    getItem(chainItem.evolves_to[0]);\n                                }\n                            }\n                        }\n                    )(evolutionChain);\n                    setEvolution(evolutionList);\n\n                })\n                .catch((e: any) => {\n                    console.log(e);\n                });\n        }\n    }, []);\n\n    /**\n     * Get Evolution sequense.\n     *\n     * @param {Array} evolution - List of related pokemons evolution.\n     */\n    if (evolution.length <= 1) return null;\n    return (\n        <>\n            <h3>Evolution Chain</h3>\n            <Ul horizontal className=\"card text-dark text-center\">\n                {evolution.map((currentPokemon, index) => {\n                    return (<Li>\n                        <PokemonCard\n                            key={index}\n                            pokemon={currentPokemon}/>\n                    </Li>);\n                })}\n            </Ul>\n        </>\n    )\n}\nexport default EvolutionChain;\n","import React, {useEffect, useState} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport IPokemonData from \"../../Types/IPokemonData\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport {\n    Container,\n    Row,\n    Col,\n    ListGroup as Ul,\n    ListGroupItem as Li\n} from \"react-bootstrap\";\nimport EvolutionChain from \"../UI/EvolutionChain\";\nimport {useGlobalContext} from '../../Services/Context'\nimport PokemonCard from \"../UI/PokemonCard\";\nimport Spinner from \"../UI/Spinner\";\n\n/**\n * Outputs the list of pokemon weight, height, order, type name, abilities, moves.\n * @param props The pokemon.\n * @constructor Functional component of pokemon page.\n */\nconst PokemonPage: React.FC = (props) => {\n    const params = useParams<any>();\n    const [pokemon, setPokemon] = useState<IPokemonData>();\n    const [pokemonSpecies, setPokemonSpecies] = useState<IPokemonData>();\n    const [name, setName] = useState<string>(\"\");\n    const {language} = useGlobalContext();\n\n    useEffect(() => {\n        PokemonListService.get(params.name)\n            .then((response: any) => {\n                setPokemon(response.data);\n            })\n            .catch((e: any) => {\n                console.log(e);\n            });\n\n        PokemonListService.getSpecies(params.name)\n            .then((response: any) => {\n                setPokemonSpecies(response.data);\n                const translatedName = response.data.names.filter(lang => lang.language.name === language)\n                setName((translatedName[0].name) ? translatedName[0].name : params.name);\n            }).catch((e: any) => {\n            console.warn(e);\n        });\n    }, [language, params.name]);\n\n\n    if (typeof pokemon === 'undefined' || typeof pokemonSpecies === 'undefined') return (\n        <h1><Spinner/>Loading...</h1>);\n\n    return (\n        <>\n            <Container>\n                <Row>\n                    <Col className=\"pokemon\">\n                        <h1>{`My name is \"${name}\"`}</h1>\n                        <PokemonCard pokemon={pokemon}/>\n                    </Col>\n                    <Col>\n                        <Ul className=\"pokemon-base-stats\">\n\n                            {pokemon.stats.map(st => (\n                                <Li key={st.stat.name}>{st.stat.name} - {st.base_stat}</Li>))}\n\n                        </Ul>\n                        <Ul className=\"pokemon-abilities\">\n                            {pokemon.abilities.map(ability => (\n                                <Li key={ability.ability.name}>{ability.ability.name}</Li>))}\n                        </Ul>\n                        <Ul className=\"pokemon-properties\">\n                            <Li>{`weight ${pokemon.weight}`}</Li>\n                            <Li>{`height ${pokemon.height}`}</Li>\n                            <Li>{`order ${pokemon.order}`}</Li>\n                        </Ul>\n                        <Ul className=\"pokemon-types\">\n                            {pokemon.types.map(typ => (\n                                <Li key={typ.type.name}>{typ.type.name}</Li>))}\n                        </Ul>\n                    </Col>\n                </Row>\n                <Row><Col><EvolutionChain pokemon={pokemon}\n                                          pokemonSpecies={pokemonSpecies}/></Col></Row>\n                <Row>\n                    <Col>\n                        <h3>Moves</h3>\n                        <Ul className=\"pokemon-moves flex-wrap\" horizontal>\n                            {console.log(\"moved\", pokemon.moves)}\n                            {pokemon.moves.map(move => (\n                                <Li key={move.move.name}>\n                                    <Link\n                                        to={`/move/${move.move.name}`}>\n                                        <h4>{move.move.name}</h4>\n                                    </Link>\n                                </Li>))}\n                        </Ul>\n                    </Col>\n                </Row>\n\n\n            </Container>\n        </>);\n};\n\n\nexport default PokemonPage;\n","import React, {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport IPokemonData from \"../../Types/IPokemonData\";\nimport PokemonListService from \"../../Services/PokemonListService\";\nimport {Container, ListGroup as Ul, ListGroupItem as Li} from \"react-bootstrap\";\nimport PokemonCard from \"../UI/PokemonCard\";\n\n/**\n * Functional component for pokemon move page.\n * @param props Pokemon move name.\n * @constructor The functional component for pokemon move page.\n */\nconst PokemonMovePage: React.FC = (props) => {\n    const params = useParams<any>();\n    const [move, setMove] = useState<IPokemonData>();\n\n    /**\n     * Gets all pokemon moves.\n     */\n    useEffect(() => {\n        PokemonListService.getMove(params.name)\n            .then((response: any) => {\n                setMove(response.data);\n            })\n            .catch((e: any) => {\n                console.warn(e);\n            });\n    }, [params.name]);\n\n    /**\n     * Retrieves the list of pokemon moves.\n     *\n     * @param props The pokemon.\n     *\n     * @constructor Functional component of pokemon moves.\n     */\n    const Move = (props) => {\n        return <>\n            <h3>Related Pokemon</h3>\n            <Container>\n                <div className=\"list-group d-flex flex-wrap flex-row\">\n                    {props?.move?.learned_by_pokemon && props?.move?.learned_by_pokemon.map((pokemon, index) =>\n                        <PokemonCard key={index} pokemon={pokemon}/>\n                    )}\n                </div>\n            </Container>\n        </>\n    };\n\n    const MoveDetailes = (props) => {\n        const {move} = props;\n        const traverseObject = [\"contest_type\", \"damage_class\", \"generation\", \"target\", \"type\"];\n        if (!move) return null;\n        return (\n            <>\n                <p className=\"card-header\">{move.effect_entries && move.effect_entries[0].effect}</p>\n                <div\n                    className=\"list-group d-flex flex-wrap flex-row justify-content-center\">\n                    <Ul className=\"card-header text-dark text-center\">\n                        <Li><strong>Power-{move.power}</strong></Li>\n                        {traverseObject.map(item =>\n                            <Li><strong>{item}</strong> - {move[item].name}\n                            </Li>)}\n                    </Ul>\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <div>\n            <div>\n                <h1>{`\"${params.name}\" move`}</h1>\n                <MoveDetailes move={move}/>\n                <Move move={move}/>\n            </div>\n        </div>\n    );\n};\n\nexport default PokemonMovePage;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Page404: React.FC = (props) => {\n    return <>\n        <h1>Page Not Found</h1>\n        <Link to='/'>Home</Link>\n    </>\n}\nexport default Page404;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Layout from \"./Components/Layout/Layout\";\nimport {Route, Switch} from \"react-router-dom\";\nimport PokemonList from \"./Components/Pages/PokemonList\";\nimport PokemonPage from \"./Components/Pages/PokemonPage\";\nimport PokemonMovePage from \"./Components/Pages/PokemonMovePage\";\nimport Page404 from \"./Components/Pages/Page404\";\n\n/**\n * The App functional component.\n * @constructor\n */\nfunction App() {\n    return (\n        <Layout className=\"App\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <PokemonList/>\n                </Route>\n                <Route path=\"/pokemon/:name\">\n                    <PokemonPage/>\n                </Route>\n                <Route path=\"/move/:name\">\n                    <PokemonMovePage/>\n                </Route>\n                <Route component={Page404}/>\n            </Switch>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}